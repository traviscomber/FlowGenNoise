import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log("Prompt enhancement request:", body)

    const {
      dataset,
      scenario,
      colorScheme,
      numSamples,
      noiseScale,
      currentPrompt,
      domeProjection,
      domeDiameter,
      domeResolution,
      panoramic360,
      panoramaResolution,
      stereographicPerspective,
    } = body

    // Check if OpenAI API key exists
    if (!process.env.OPENAI_API_KEY) {
      console.error("OPENAI_API_KEY not found in environment variables")
      return NextResponse.json(
        {
          success: false,
          error: "OpenAI API key not configured",
        },
        { status: 500 },
      )
    }

    // Build enhancement prompt
    const enhancementPrompt = `You are an expert AI art prompt engineer. Enhance this prompt for DALL-E 3 to create stunning photorealistic artwork.

Current settings:
- Dataset: ${dataset}
- Scenario: ${scenario}
- Color Scheme: ${colorScheme}
- Mathematical Complexity: ${numSamples} samples with ${noiseScale} noise scale
${domeProjection ? `- Dome Projection: ${domeDiameter}m dome in ${domeResolution}` : ""}
${panoramic360 ? `- 360Â° Format: ${panoramaResolution} ${stereographicPerspective} stereographic projection` : ""}

Current prompt: "${currentPrompt || "None provided"}"

Please enhance this into a detailed, vivid prompt that will create photorealistic artwork combining mathematical patterns with immersive scenarios. Focus on:
1. Realistic textures and lighting
2. Magical/fantastical elements if the scenario calls for it
3. Mathematical pattern integration
4. Color palette enhancement
5. Atmospheric details
${panoramic360 ? "6. Stereographic projection optimization" : ""}
${domeProjection ? "6. Dome projection fisheye perspective" : ""}

Return only the enhanced prompt, no explanations.`

    console.log("Sending enhancement request to OpenAI...")

    const openaiResponse = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-4",
        messages: [
          {
            role: "user",
            content: enhancementPrompt,
          },
        ],
        max_tokens: 500,
        temperature: 0.8,
      }),
    })

    if (!openaiResponse.ok) {
      const errorText = await openaiResponse.text()
      console.error("OpenAI API error:", errorText)
      return NextResponse.json(
        {
          success: false,
          error: `OpenAI API error: ${openaiResponse.status}`,
          details: errorText,
        },
        { status: 500 },
      )
    }

    const data = await openaiResponse.json()
    console.log("OpenAI enhancement response:", data)

    if (!data.choices || data.choices.length === 0) {
      return NextResponse.json(
        {
          success: false,
          error: "No enhancement generated by OpenAI",
        },
        { status: 500 },
      )
    }

    const enhancedPrompt = data.choices[0].message.content.trim()

    return NextResponse.json({
      success: true,
      enhancedPrompt,
    })
  } catch (error) {
    console.error("Prompt enhancement error:", error)

    return NextResponse.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error occurred",
        details: error instanceof Error ? error.stack : String(error),
      },
      { status: 500 },
    )
  }
}
